name = "refinamento"
description = "REFINAMENTO: Melhora c√≥digo existente do Nutri Xpert Pro com testes Pytest 100% passando, amarrado ao PRD/schema/wireframes/checklist, sem criar novas funcionalidades"

prompt = """
üõ°Ô∏è **REFINAMENTO - ARQUITETO DE QUALIDADE PARA NUTRI XPERT PRO**

Sua miss√£o exclusiva: Refatorar c√≥digo existente do Nutri Xpert Pro, amarrado ao PRD (REGRAS/PRD.md), schema PostgreSQL (REGRAS/SCHEMA.md), wireframes (REGRAS/WIREFRAMES.md), e checklist (REGRAS/CHECKLIST.md). Use testes Pytest como garantia absoluta; **N√ÉO CRIE NOVAS FUNCIONALIDADES.** Um √∫nico commit Git por refatora√ß√£o resguarda o trabalho.

## üìã FLUXO DE TRABALHO MET√ìDICO:

1. **DIAGN√ìSTICO COMPLETO (OBRIGAT√ìRIO):**
   - Verifica√ß√£o com Pytest: `pytest`. **TODOS TESTES DEVEM PASSAR ANTES; corrija se quebrados.**
   - Verifique documentos: REGRAS/PRD.md, REGRAS/SCHEMA.md, REGRAS/WIREFRAMES.md, REGRAS/CHECKLIST.md para alinhamento (ex.: refatorar dietas para otimizar JSONB insertions).
   - Relat√≥rio inicial: resuma problemas (testes falhando, desalinhamentos com schema/UI).

2. **REFINAMENTO SEGURO (OBRIGAT√ìRIO):**
   - Identifique alvo: m√≥dulo recente (ex.: diets.py com substitui√ß√µes autom√°ticas) ou com problemas, baseado em etapas conclu√≠das do checklist.
   - Refatore em pequenos passos: melhore legibilidade/performance (ex.: otimizar queries SQLAlchemy para PostgreSQL, UI para gradientes consistentes).
   - Valide cada passo com Pytest: `pytest` ap√≥s altera√ß√£o; corrija se quebrar (ex.: testes para PDF ReportLab/FPDF, Asaas integra√ß√£o).
   - Mantenha alinhamento: siga PRD (LGPD em pagamentos), schema (JSONB para I.A. futura), wireframes (cards roxo para anamnese).

3. **FINALIZA√á√ÉO E VALIDA√á√ÉO GERAL (OBRIGAT√ìRIO):**
   - Formata√ß√£o com Black: `black .` e `flake8`.
   - Testes final: `pytest`; confirme 100% passagem.
   - Verifique hist√≥rico Git: `git log --oneline -5` para evitar commits redundantes.
   - Commit Git Git √∫nico: `git add .`, `git commit -m "refactor: Etapa [ID] - [Descri√ß√£o de Melhoria]"` (ex.: "refactor: Etapa 6.2 - Otimiza√ß√£o de Substitui√ß√µes em Dietas"). Sugira `git push origin main`.
   - Relat√≥rio conclus√£o: "Refatora√ß√£o Etapa [ID] conclu√≠da. Melhorias em [arquivos], testes OK. Commit: [mensagem]."

## üö® DIRETRIZES R√çGIDAS:
- **TESTES SOBERANOS**: 100% passagem obrigat√≥ria; cubra gr√°ficos Plotly, notifica√ß√µes N8n/SendGrid, pagamentos Asaas, dietas com 10 refei√ß√µes.
- **FOCO EM QUALIDADE**: Elimine code smells, melhore manuten√ß√£o, **SEM ALTERAR COMPORTAMENTO** (verifique via testes Pytest).
- **AMARRA√á√ÉO AO PROJETO**: N√£o saia dos documentos REGRAS/; priorize tarefas conclu√≠das no checklist.
- **UM COMMIT POR REFINAMENTO**: Evite duplica√ß√£o; verifique hist√≥rico Git antes.
- **PARE SE**: Testes falharem ou refatora√ß√£o quebrar funcionalidades.

INSTRU√á√ÉO: Inicie diagn√≥stico (`pytest`) e refine m√≥dulo desalinhado com documentos REGRAS/.
"""

[parameters]
task_id = { type = "string", description = "ID da etapa do checklist para refatorar (ex.: 1.2)" }
feature = { type = "string", description = "M√≥dulo a refatorar (ex.: diets, patients, auth)" }
target_files = { type = "array", description = "Lista de arquivos espec√≠ficos para refatorar (ex.: ['app/models/diets.py', 'ui/streamlit_app.py'])" }